(princ "quasiquoted literal 1")
(unless (equal `a 'a)
  (princ "  -- ERROR"))
(terpri)

(princ "quasiquoted literal 2")
(unless (equal `1 1)
  (princ "  -- ERROR"))
(terpri)

(princ "quasiquoted list 1")
(unless (equal `(a b c) '(a b c))
  (princ "  -- ERROR"))
(terpri)

(princ "quasiquoted list 2")
(unless (equal `(1 (2) 3) '(1 (2) 3))
  (princ "  -- ERROR"))
(terpri)

(princ "unquote")
(unless (equal `(a ,(+ 1 2) b) '(a 3 b))
  (princ "  -- ERROR"))
(terpri)

(princ "unquote splicing")
(unless (equal `(a @(list 1 2 3) b)
                   '(a 1 2 3 b))
  (princ "  -- ERROR"))
(terpri)

(princ "nested unquote splicing")
(unless (equal `(a @(list 1 2 3) `(list @(list a b c)))
            '(a 1 2 3 `(list @(list a b c))))
  (princ "  -- ERROR"))
(terpri)

(princ "combined and eval")
(let* ((x 1)
       (y '(2 3)))
  (unless (equal (eval `(+ ,x @y)) 6)
    (princ "  -- ERROR"))
  )
(terpri)

(defmacro add (x y)
  `(+ ,x @y))

(princ "defmacro")
(unless (equal (add 1 '(2 3))
            6)
  (princ "  -- ERROR"))
(terpri)

(princ "expand")
(unless (equal (expand add 1 '(2 3))
            '(+ 1 2 3))
  (princ "  -- ERROR"))
(terpri)

(princ "nested")
(unless (equal  `(a `(b ,(+ 1 2) ,(foo ,(+ 1 3) d) e) f)
             '(a `(b ,(+ 1 2) ,(foo 4 d) e) f))
  (princ "  -- ERROR"))
(terpri)
